/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RandomnessWTFInterface extends Interface {
  getFunction(
    nameOrSignature: "cadenceArch" | "getRandomNumber" | "selectRandomItem"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RandomItemSelected" | "RandomNumberGenerated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cadenceArch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNumber",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selectRandomItem",
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "cadenceArch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectRandomItem",
    data: BytesLike
  ): Result;
}

export namespace RandomItemSelectedEvent {
  export type InputTuple = [item: string, index: BigNumberish];
  export type OutputTuple = [item: string, index: bigint];
  export interface OutputObject {
    item: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomNumberGeneratedEvent {
  export type InputTuple = [
    randomNumber: BigNumberish,
    min: BigNumberish,
    max: BigNumberish
  ];
  export type OutputTuple = [randomNumber: bigint, min: bigint, max: bigint];
  export interface OutputObject {
    randomNumber: bigint;
    min: bigint;
    max: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RandomnessWTF extends BaseContract {
  connect(runner?: ContractRunner | null): RandomnessWTF;
  waitForDeployment(): Promise<this>;

  interface: RandomnessWTFInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cadenceArch: TypedContractMethod<[], [string], "view">;

  getRandomNumber: TypedContractMethod<
    [min: BigNumberish, max: BigNumberish],
    [bigint],
    "view"
  >;

  selectRandomItem: TypedContractMethod<[items: string[]], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cadenceArch"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRandomNumber"
  ): TypedContractMethod<
    [min: BigNumberish, max: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "selectRandomItem"
  ): TypedContractMethod<[items: string[]], [string], "view">;

  getEvent(
    key: "RandomItemSelected"
  ): TypedContractEvent<
    RandomItemSelectedEvent.InputTuple,
    RandomItemSelectedEvent.OutputTuple,
    RandomItemSelectedEvent.OutputObject
  >;
  getEvent(
    key: "RandomNumberGenerated"
  ): TypedContractEvent<
    RandomNumberGeneratedEvent.InputTuple,
    RandomNumberGeneratedEvent.OutputTuple,
    RandomNumberGeneratedEvent.OutputObject
  >;

  filters: {
    "RandomItemSelected(string,uint256)": TypedContractEvent<
      RandomItemSelectedEvent.InputTuple,
      RandomItemSelectedEvent.OutputTuple,
      RandomItemSelectedEvent.OutputObject
    >;
    RandomItemSelected: TypedContractEvent<
      RandomItemSelectedEvent.InputTuple,
      RandomItemSelectedEvent.OutputTuple,
      RandomItemSelectedEvent.OutputObject
    >;

    "RandomNumberGenerated(uint64,uint64,uint64)": TypedContractEvent<
      RandomNumberGeneratedEvent.InputTuple,
      RandomNumberGeneratedEvent.OutputTuple,
      RandomNumberGeneratedEvent.OutputObject
    >;
    RandomNumberGenerated: TypedContractEvent<
      RandomNumberGeneratedEvent.InputTuple,
      RandomNumberGeneratedEvent.OutputTuple,
      RandomNumberGeneratedEvent.OutputObject
    >;
  };
}
